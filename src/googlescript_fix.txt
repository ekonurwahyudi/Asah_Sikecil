function doOptions(e) { 
  var output = ContentService.createTextOutput()
    .setMimeType(ContentService.MimeType.JSON)
    .setContent(JSON.stringify({ status: "success" }));
  
  // Tambahkan header CORS
  output.addHeader('Access-Control-Allow-Origin', '*');
  output.addHeader('Access-Control-Allow-Methods', 'POST, GET, OPTIONS');
  output.addHeader('Access-Control-Allow-Headers', 'Content-Type, Origin');
  
  return output;
} 

function doPost(e) { 
  try { 
    // Periksa apakah ada data yang diterima
    if (!e || !e.postData) {
      return ContentService.createTextOutput(JSON.stringify({ 
        status: "error", 
        message: "No post data received" 
      })).setMimeType(ContentService.MimeType.JSON);
    }
    
    // Parse data yang diterima 
    var data = JSON.parse(e.postData.contents); 
    
    // Get the spreadsheet 
    var ss = SpreadsheetApp.getActiveSpreadsheet(); 
    var sheet = ss.getActiveSheet(); 
    var lastRow = sheet.getLastRow(); 
    
    // Log data yang diterima untuk debugging
    Logger.log('Data yang diterima: ' + JSON.stringify(data));
    logToSheet({
      action: "received_data",
      timestamp: new Date().toISOString(),
      data: data
    });
    
    // Jika ada transaction_status, ini adalah callback dari Midtrans 
    if (data.transaction_status !== undefined) { 
      // Cari baris dengan invoice number yang sesuai 
      var dataRange = sheet.getRange(2, 1, lastRow - 1, sheet.getLastColumn()); 
      var values = dataRange.getValues(); 
      
      // Konversi status Midtrans ke status yang lebih deskriptif
      var paymentStatus = "UNKNOWN";
      if (data.transaction_status === "capture" || data.transaction_status === "settlement") {
        paymentStatus = "SUKSES";
      } else if (data.transaction_status === "pending") {
        paymentStatus = "PENDING";
      } else if (data.transaction_status === "deny" || data.transaction_status === "cancel" || 
                 data.transaction_status === "expire" || data.transaction_status === "failure") {
        paymentStatus = "FAILED";
      }
      
      // Log informasi callback
      logToSheet({
        action: "processing_callback",
        order_id: data.order_id,
        transaction_status: data.transaction_status,
        payment_status: paymentStatus
      });
      
      var invoiceFound = false;
      
      // Cari berdasarkan Id Invoice (kolom G)
      for (var i = 0; i < values.length; i++) { 
        // Kolom 6 (indeks array) adalah Id Invoice (kolom G di spreadsheet)
        if (values[i][6] === data.order_id) { 
          invoiceFound = true;
          
          // Update status di kolom 8 (indeks array) / kolom I di spreadsheet
          sheet.getRange(i + 2, 9).setValue(paymentStatus); 
          
          logToSheet({
            action: "update_success",
            order_id: data.order_id,
            row: i + 2,
            new_status: paymentStatus
          });
          
          return ContentService.createTextOutput(JSON.stringify({ 
            status: "success", 
            message: "Payment status updated successfully" 
          })).setMimeType(ContentService.MimeType.JSON); 
        } 
      } 
      
      // Jika tidak ditemukan dengan order_id, coba cari dengan case-insensitive
      if (!invoiceFound) {
        for (var i = 0; i < values.length; i++) { 
          if (values[i][6] && values[i][6].toString().toLowerCase() === data.order_id.toString().toLowerCase()) { 
            invoiceFound = true;
            
            // Update status di kolom 8 (indeks array) / kolom I di spreadsheet
            sheet.getRange(i + 2, 9).setValue(paymentStatus); 
            
            logToSheet({
              action: "update_success_case_insensitive",
              order_id: data.order_id,
              row: i + 2,
              new_status: paymentStatus
            });
            
            return ContentService.createTextOutput(JSON.stringify({ 
              status: "success", 
              message: "Payment status updated successfully" 
            })).setMimeType(ContentService.MimeType.JSON); 
          } 
        }
      }
      
      // Log bahwa invoice tidak ditemukan
      logToSheet({
        action: "invoice_not_found",
        order_id: data.order_id
      });
      
      return ContentService.createTextOutput(JSON.stringify({ 
        status: "error", 
        message: "Invoice not found" 
      })).setMimeType(ContentService.MimeType.JSON); 
    } 
    
    // Jika tidak ada transaction_status, ini adalah data baru dari form 
    logToSheet({
      action: "new_form_data",
      formData: data
    });
    
    sheet.appendRow([ 
      new Date(), // Timestamp 
      data.name, 
      data.phone, 
      data.email, 
      data.package, 
      data.invoice,    // No_Invoice (kolom F)
      data.idinvoice,  // Id Invoice (kolom G)
      data.harga, 
      data.status, 
      data.invoice_url 
    ]);
    
    logToSheet({
      action: "form_data_saved",
      invoice: data.invoice
    });
    
    return ContentService.createTextOutput(JSON.stringify({ 
      status: "success", 
      message: "Data saved successfully" 
    })).setMimeType(ContentService.MimeType.JSON);
    
  } catch (error) {
    // Log error
    logToSheet({
      action: "error",
      error: error.toString()
    });
    
    return ContentService.createTextOutput(JSON.stringify({ 
      status: "error", 
      message: error.toString() 
    })).setMimeType(ContentService.MimeType.JSON);
  }
}

// Fungsi untuk logging ke sheet terpisah
function logToSheet(data) {
  try {
    var ss = SpreadsheetApp.getActiveSpreadsheet();
    var logSheet = ss.getSheetByName('Log') || ss.insertSheet('Log');
    
    logSheet.appendRow([
      new Date(),
      JSON.stringify(data)
    ]);
  } catch (error) {
    Logger.log('Error logging to sheet: ' + error.toString());
  }
}